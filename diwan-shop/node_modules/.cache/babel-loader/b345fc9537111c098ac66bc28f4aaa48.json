{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n// export const api = createAsyncThunk(\n//   \"productsSlice/api\",\n//   async (_, thunkApi) => {\n//     const { rejectWithValue } = thunkApi;\n//     try {\n//       const res = await fetch(\"http://localhost:3000/products\");\n//       const data = await res.json();\n//       return data;\n//     } catch (error) {\n//       return rejectWithValue(error.message);\n//     }\n//   }\n// );\n\n// export const insert = createAsyncThunk(\n//   \"productsSlice/insert\",\n//   async (productData, thunkApi) => {\n//     const { rejectWithValue } = thunkApi;\n//     try {\n//       const res = await fetch(\"http://localhost:3000/products\", {\n//         method: \"POST\",\n\n//         body: JSON.stringify(productData),\n\n//         headers: { \"Content-type\": \"application/json; charset=utf-8\" },\n//       });\n//       const data = await res.json();\n//       return data;\n//     } catch (error) {\n//       return rejectWithValue(error.message);\n//     }\n//   }\n// );\n\n// export const update = createAsyncThunk(\n//   \"productsSlice/update\",\n//   async (productData, thunkApi) => {\n//     const { rejectWithValue } = thunkApi;\n//     try {\n//       const res = await fetch(\n//         `http://localhost:3000/products/${productData.id}`,\n//         {\n//           method: \"PUT\",\n\n//           body: JSON.stringify(productData),\n\n//           headers: { \"Content-type\": \"application/json; charset=utf-8\" },\n//         }\n//       );\n//       const data = await res.json();\n//       return data;\n//     } catch (error) {\n//       return rejectWithValue(error.message);\n//     }\n//   }\n// );\n// export const deletePro = createAsyncThunk(\n//   \"productsSlice/deletePro\",\n//   async (productData, thunkApi) => {\n//     const { rejectWithValue } = thunkApi;\n//     console.log(productData);\n//     try {\n//       await fetch(`http://localhost:3000/products/${productData.id}`, {\n//         method: \"DELETE\",\n\n//         headers: { \"Content-type\": \"application/json; charset=utf-8\" },\n//       });\n//       return productData;\n//     } catch (error) {\n//       return rejectWithValue(error.message);\n//     }\n//   }\n// );\n\nconst productsSlice = createSlice({\n  name: \"productsSlice\",\n  initialState: {\n    products: [],\n    loading: false,\n    error: null\n  },\n  reducers: {\n    ADD_PRODUCT: (state, action) => {\n      return state = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(api.pending, (state, action) => {\n      state.loading = true;\n      state.error = null;\n    });\n    builder.addCase(api.fulfilled, (state, action) => {\n      state.loading = false;\n      state.products = action.payload;\n    });\n    builder.addCase(api.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    });\n    builder.addCase(insert.pending, (state, action) => {\n      state.loading = true;\n      state.error = null;\n    });\n    builder.addCase(insert.fulfilled, (state, action) => {\n      state.loading = false;\n      state.products.push(action.payload);\n    });\n    builder.addCase(insert.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    });\n    builder.addCase(deletePro.fulfilled, (state, action) => {\n      state.loading = false;\n      state.products = state.products.filter(product => product.id !== action.payload.id);\n    });\n    builder.addCase(update.fulfilled, (state, action) => {\n      const {\n        id,\n        productName,\n        price,\n        category,\n        img\n      } = action.payload;\n      const updateState = state.products.find(product => product.id === id);\n      console.log(action.payload.img);\n      if (updateState) {\n        updateState.productName = productName;\n        updateState.price = price;\n        updateState.category = category;\n        updateState.img = img;\n      }\n    });\n  }\n});\nexport const {\n  ADD_PRODUCT,\n  updateProduct\n} = productsSlice.actions;\nexport default productsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","productsSlice","name","initialState","products","loading","error","reducers","ADD_PRODUCT","state","action","payload","extraReducers","builder","addCase","api","pending","fulfilled","rejected","insert","push","deletePro","filter","product","id","update","productName","price","category","img","updateState","find","console","log","updateProduct","actions","reducer"],"sources":["C:/Users/MohannadDiwan/Desktop/E-commerce/diwan-shop/src/rtk/slices/productsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n// export const api = createAsyncThunk(\r\n//   \"productsSlice/api\",\r\n//   async (_, thunkApi) => {\r\n//     const { rejectWithValue } = thunkApi;\r\n//     try {\r\n//       const res = await fetch(\"http://localhost:3000/products\");\r\n//       const data = await res.json();\r\n//       return data;\r\n//     } catch (error) {\r\n//       return rejectWithValue(error.message);\r\n//     }\r\n//   }\r\n// );\r\n\r\n// export const insert = createAsyncThunk(\r\n//   \"productsSlice/insert\",\r\n//   async (productData, thunkApi) => {\r\n//     const { rejectWithValue } = thunkApi;\r\n//     try {\r\n//       const res = await fetch(\"http://localhost:3000/products\", {\r\n//         method: \"POST\",\r\n\r\n//         body: JSON.stringify(productData),\r\n\r\n//         headers: { \"Content-type\": \"application/json; charset=utf-8\" },\r\n//       });\r\n//       const data = await res.json();\r\n//       return data;\r\n//     } catch (error) {\r\n//       return rejectWithValue(error.message);\r\n//     }\r\n//   }\r\n// );\r\n\r\n// export const update = createAsyncThunk(\r\n//   \"productsSlice/update\",\r\n//   async (productData, thunkApi) => {\r\n//     const { rejectWithValue } = thunkApi;\r\n//     try {\r\n//       const res = await fetch(\r\n//         `http://localhost:3000/products/${productData.id}`,\r\n//         {\r\n//           method: \"PUT\",\r\n\r\n//           body: JSON.stringify(productData),\r\n\r\n//           headers: { \"Content-type\": \"application/json; charset=utf-8\" },\r\n//         }\r\n//       );\r\n//       const data = await res.json();\r\n//       return data;\r\n//     } catch (error) {\r\n//       return rejectWithValue(error.message);\r\n//     }\r\n//   }\r\n// );\r\n// export const deletePro = createAsyncThunk(\r\n//   \"productsSlice/deletePro\",\r\n//   async (productData, thunkApi) => {\r\n//     const { rejectWithValue } = thunkApi;\r\n//     console.log(productData);\r\n//     try {\r\n//       await fetch(`http://localhost:3000/products/${productData.id}`, {\r\n//         method: \"DELETE\",\r\n\r\n//         headers: { \"Content-type\": \"application/json; charset=utf-8\" },\r\n//       });\r\n//       return productData;\r\n//     } catch (error) {\r\n//       return rejectWithValue(error.message);\r\n//     }\r\n//   }\r\n// );\r\n\r\nconst productsSlice = createSlice({\r\n  name: \"productsSlice\",\r\n  initialState: { products: [], loading: false, error: null },\r\n  reducers: {\r\n    ADD_PRODUCT: (state, action) => {\r\n      return (state = action.payload);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(api.pending, (state, action) => {\r\n      state.loading = true;\r\n      state.error = null;\r\n    });\r\n    builder.addCase(api.fulfilled, (state, action) => {\r\n      state.loading = false;\r\n\r\n      state.products = action.payload;\r\n    });\r\n    builder.addCase(api.rejected, (state, action) => {\r\n      state.loading = false;\r\n      state.error = action.payload;\r\n    });\r\n\r\n    builder.addCase(insert.pending, (state, action) => {\r\n      state.loading = true;\r\n      state.error = null;\r\n    });\r\n    builder.addCase(insert.fulfilled, (state, action) => {\r\n      state.loading = false;\r\n\r\n      state.products.push(action.payload);\r\n    });\r\n    builder.addCase(insert.rejected, (state, action) => {\r\n      state.loading = false;\r\n      state.error = action.payload;\r\n    });\r\n\r\n    builder.addCase(deletePro.fulfilled, (state, action) => {\r\n      state.loading = false;\r\n      state.products = state.products.filter(\r\n        (product) => product.id !== action.payload.id\r\n      );\r\n    });\r\n\r\n    builder.addCase(update.fulfilled, (state, action) => {\r\n      const { id, productName, price, category, img } = action.payload;\r\n      const updateState = state.products.find((product) => product.id === id);\r\n      console.log(action.payload.img);\r\n      if (updateState) {\r\n        updateState.productName = productName;\r\n        updateState.price = price;\r\n        updateState.category = category;\r\n        updateState.img = img;\r\n      }\r\n    });\r\n  },\r\n});\r\n\r\nexport const { ADD_PRODUCT, updateProduct } = productsSlice.actions;\r\nexport default productsSlice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}